"""This function is used to calcuation the mean of a normal distribution

import scipy.stats as stats
import numpy as np

def mean_confidence_interval(x, alpha=0.05):
    """
    



"""JSON Export a scikit-learn Pipeline object
   Use with GridSearchCV, TPOT, etc
   Example:
   
   best_model = GridSearchCV(
                some_pipeline,
                param_grid=some_tuning_parameters
   )
   best_model.fit(X=train_x, y=train_y)
   export_pipeline(best_model.best_estimator_)
  
   :param scikit_pipeline: a scikit-learn Pipeline object
"""
import json

def fullname(o):
   return o.__module__ + "." + o.__class__.__name__
  
def export_pipeline(scikit_pipeline):
  steps_obj = {'steps':[]}
  for name, md in scikit_pipeline.steps:
      steps_obj['steps'].append({
          'name': name,
          'class_name': fullname(md),
          'params': md.get_params()
      })
    
  return steps_obj
  


"""
   Confidence Interal for the mean of a Normal distribution
"""
from scipy import stats
import numpy as np

def mean_confidence_interval(x, alpha=0.05):
    """Computes two-sided confidence interval for a Normal mean
    
    Assumes population variance is unknown.
    
    x is assumed to be a list or a 1-d Numpy array
    """
    n = len(x)
    xbar = np.mean(x)
    standard_error=stats.sem(x)
    return stats.t.interval(1 - alpha,
                            n - 1,
                            loc=xbar,
                            scale=standard_error)   
  

"""
   Huber Regression - Robust Stats 
   def excludeOutliers(data, m):
        return data[abs(data - np.mean(data)) <= m*np.std(data)]     
"""
def HuberReg(X)
    colors = ['r-', 'b-', 'y-', 'm-']

    x = np.linspace(X.min(), X.max(), 7)
    epsilon_values = [1.35, 1.5, 1.75, 1.9]
    for k, epsilon in enumerate(epsilon_values):
        huber = HuberRegressor(fit_intercept=True, alpha=0.0, max_iter=100,
                               epsilon=epsilon)

        huber.fit(X, y)
        coef_ = huber.coef_ * x + huber.intercept_
        plt.plot(x, coef_, colors[k], label="huber loss, %s" % epsilon)
    
#ifndef ALIGN_H_23939445851010928567
#define ALIGN_H_23939445851010928567
#include <vector>
#include <string>
using namespace std;

struct TRADE{
	long long timestamp;
	float price;
	long volume;
	string ID;
};

struct MATCH{
	MATCH(size_t ifirm, size_t imarket, double td) :iFirm(ifirm), iMarket(imarket), timeDiff(td){}
	MATCH() :iFirm(0), iMarket(0), timeDiff(0){}
	size_t iFirm; //index to the firm data
	size_t iMarket; //index to the market vector
	double timeDiff; //time difference of the market and firm trades
};

struct GaussianPara{
	GaussianPara(double m, double s, size_t n) : mu(m), sigma(s), nLen(n){};

	double mu;
	double sigma;
	size_t nLen;
};

double mean(vector<double>& in);
double variance(vector<double>& in);
GaussianPara oddMatch(vector<long long>& vFirmTimeStamp, vector<float>& vFirmPrice, vector<long>& vFirmVol,
	vector<long long>& vMarketTimeStamp, vector<float>& vMarketPrice, vector<long>& vMarketVol, int winsize = 1000);
GaussianPara EM_estimator(vector<vector<double> >& tmpTD,long nRecord);

void align(vector<long long>& vFirmTimeStamp, vector<float>& vFirmPrice, vector<long>& vFirmVol, vector<string>& vFirmID,
	vector<long long>& vMarketTimeStamp, vector<float>& vMarketPrice, vector<long>& vMarketVol, vector<string>& vMarketID,
	vector<size_t>& vFirmInx, vector<size_t>& vMarketInx, vector<double>& vTimeDiff, int winsize = 1000);
void alignFuncForward(vector<vector<size_t> >& candidates, vector<vector<double> >& timeDiff, double mu, double sigma, vector<size_t>& vFirmInx, vector<size_t>& vMarketInx, vector<double>& vTimeDiff);
void alignwrapper(std::vector<TRADE>& vFirm, std::vector<TRADE>& vMarket, vector<MATCH>& output, int winsize=1000);
void readData(const string& filename, vector<TRADE>& vData);
void test();
#endif

