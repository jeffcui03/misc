==========Convert timestamp from string to usec =========================================================

#Default "chTm" is usec format
def chTm2Usec(chTm):
    #uncomment when input is nsec
    #subStr=chTm[:-3]
    #print "input=",chTm
    try:
        if chTm.find('.') != -1:
            tm = datetime.strptime(chTm, '%H:%M:%S.%f')
        else:
            tm = datetime.strptime(chTm, '%H:%M:%S')
        usecs=tm.hour*3600000000 + tm.minute*60000000+ tm.second*1000000 +  tm.microsecond
        return usecs*1000
    except ValueError:
        print("Exception: ", chTm)
        return 0
    
    
mktOpen = chTm2Usec('09:30:00')
mktClose = chTm2Usec('16:00:00.000000')
print("mktOpen={}, mktClose={}".format(mktOpen, mktClose))


=======================================================================================================


==================================================================================================================
#Realized _r
#High _h
#Low _l

a_r = 3.8125/(1+ 0.0154*0.01/2) 

b_r = 3.8125/( 1+ 0.1008*0.01/2)
b_h = 3.8125/( 1 + 0.15 * 0.01/2)
b_l = 3.8125/(1 + 0.05 * 0.01/2)

c_r = 103.8125/(( 1+ 0.1008*0.01/2) *  ( 1+ 0.1833*0.01/2))
c_h = 103.8125/(( 1+ 0.1508*0.01/2) *  ( 1+ 0.2500*0.01/2))
c_l = 103.8125/(( 1+ 0.0508*0.01/2) *  ( 1+ 0.1000*0.01/2))

px_051521 = a_r + b_r+ c_r
print("As of 5/15/21: TradePx 111.2797 111.2797 111.2792 ThereticalPx = {}\n ". format(px_051521))

px_111521 = b_r + c_r
h_111521 = b_h + c_h
l_111521 = b_l + c_l
print("As of 11/15/21: TradePx 107.4758, 107.4148, 107.5462 ThereticalPx ={} {} {}\n ".format(px_111521, h_111521, l_111521))

six_months_Annulized_Return_r = 2*  (107.4758 + 3.8125 - 111.2797)/111.2797 
six_months_Annulized_Return_h = 2*  (107.4148 + 3.8125 - 111.2797)/111.2797 
six_months_Annulized_Return_l = 2*  (107.5462 + 3.8125 - 111.2797)/111.2797 

print("6m Annualized Return={} {} {}.".format(six_months_Annulized_Return_r, six_months_Annulized_Return_h,six_months_Annulized_Return_l))

As of 5/15/21: TradePx 111.2797 111.2797 111.2792 ThereticalPx = 111.2879816329394
 
As of 11/15/21: TradePx 107.4758, 107.4148, 107.5462 ThereticalPx =107.47577517283683 107.41442114455369 107.54581829849556
 
6m Annualized Return=0.00015456547780055613 -0.0009417710507847483 0.0014198456681675726.



https://app.gumroad.com/d/b5ea62d893b614949f58b41d0865bfe5

np.set_printoptions(precision=6)
pd.options.display.float_format='{:, .6f}'.format



""" Jupyter Notebook Download Package or Model from internet without SSL certificate
import requests
requests.packages.urllib3.disable_warnings()
import ssl

try:
    _create_unverified_https_context = ssl._create_unverified_context
except AttributeError:
    # Legacy Python that doesn't verify HTTPS certificates by default
    pass
else:
    # Handle target environment that doesn't support HTTPS verification
    ssl._create_default_https_context = _create_unverified_https_context


""" Add plot grid

import numpy as np 
import matplotlib.pyplot as plt 

f = lambda x: 0.1*x**5 - 0.2*x**3 + 0.1*x - 0.2
h = 0.05
x = np.linspace(0,1,11) 

# Central differences approximation
dfc1 = (f(x+h) - f(x-h))/(2*h)
dfc2 = (f(x+h) - 2*f(x) + f(x-h)) / h**2
print(('f\' ={}').format(dfc1))
print(('f\'\'={}').format(dfc2))

plt.plot(x,f(x),'-k', x,dfc1,'--b', x,dfc2,'-.r')
plt.xlabel('x')
plt.ylabel('y')
plt.legend(['f(x)','f \'(x)','f \'\'(x)'])
#plt.grid()
plt.show()

""" Timer function #1

def timer(f):
    def g(*args, **kwargs):
        start = time.time()
        result = f(*args, **kwargs)
        elapsed = time.time() - start
        return result, elapsed
    return g
    
def f(n=1000000):
    s = sum([x*x for x in range(n)])
    return s

timed_func = timer(f)

timed_func()


""" Timer function #2
def timer2(f, *args, **kwargs):
    start = time.time()
    result = f(*args, **kwargs)
    elapsed = time.time() - start
    return result, elapsed

timer2(f)
